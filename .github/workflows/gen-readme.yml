name: Generate README
on:
  workflow_call:
    inputs:
      wait-for-commits:
        description: "Number of commits to wait for"
        required: false
        type: number
        default: 10
      template-file:
        description: "Template file"
        required: false
        type: string
        default: "README.tmpl.md"
      output-file:
        description: "Output file"
        required: false
        type: string
        default: "README.md"
      header:
        description: "Cloc header"
        required: false
        type: string
        default: "Lines of code"
      commit:
        description: "true if we should commit the changes"
        required: false
        type: boolean
        default: true
  # push:
  # pull_request:
  #   paths:
  #     - "README.md" # This isn't needed, but it's a good sanity check
  #     - "README.tmpl.md"
  # workflow_dispatch:
jobs:
  generate-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - run: echo "wait_for_commits_plus_one=$((COMMIT_COUNT + 1))" >> $GITHUB_ENV
        env:
          COMMIT_COUNT: ${{ inputs.wait-for-commits }}
      - uses: actions/checkout@master
        with: # We need to fetch enough commits to check if we've waited long enough
          fetch-depth: ${{ env.wait_for_commits_plus_one }}

      # Check for changes to the template file or n+1 commits
      - name: Check if we've waited long enough (${{ inputs.wait-for-commits }}+ commits)
        id: commit-count
        run: |
          ok=false
          [ '${{ github.event_name }}' != 'workflow_dispatch' ] || ok=true
          if ! "$ok"; then
            last_sha=$(git log --oneline --format=format:%H --grep="^chore: Generate README$" -1)
            echo "last_sha=$last_sha" | tee -a "$GITHUB_OUTPUT"
            if [ -n "$last_sha" ]; then # success if last_sha is empty
              count=$(git rev-list $last_sha..HEAD --count)
              echo "count=$count" | tee -a "$GITHUB_OUTPUT"
            if [ $count -gt "${{ inputs.wait-for-commits }}" ]; then ok=true; fi
            fi
          fi
          echo "success=$ok" | tee -a "$GITHUB_OUTPUT"
      - name: Check if ${{ inputs.template-file }} was updated
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: ${{ inputs.template-file }}
          base_sha: ${{ steps.commit-count.output.last_sha }} # since our last check

      - name: Check if we should continue
        id: continue
        run: |
          if [ '${{ steps.commit-count.output.success }}' = 'true' ] || '${{ steps.changed-files.outputs.any_changed }}' = 'true' ]; then
           echo "continue=true" 
          else
           echo "continue=false" 
          fi | tee -a "$GITHUB_OUTPUT"

      # Do the actual work, if we should continue
      - name: Initialize ${{ inputs.output-file }}
        if: ${{ steps.continue.outputs.continue == 'true' }}
        env:
          TEMPLATE_FILE: ${{ inputs.template-file }}
          OUTPUT_FILE: ${{ inputs.output-file }}
        run: |
          [ -f "$TEMPLATE_FILE" ] || cp "$OUTPUT_FILE" "$TEMPLATE_FILE"
          printf '%s\n' "<!-- This file is generated from $TEMPLATE_FILE -->" >| "$OUTPUT_FILE"
          cat "$TEMPLATE_FILE" >> "$OUTPUT_FILE"

      - name: CLOC
        if: ${{ steps.continue.outputs.continue == 'true' }}
        uses: docker://aldanial/cloc
        with: # Exclude YAML to avoid counting lock files
          args: ${{ github.sha }} --md --report-file=cloc.md --hide-rate --exclude-lang=YAML

      - name: output cloc.md
        if: ${{ steps.continue.outputs.continue == 'true' }}
        run: cat cloc.md

      # Note: initial newline is required because git files don't end with one
      - name: Update ${{ inputs.output-file }}
        if: ${{ steps.continue.outputs.continue == 'true' }}
        env:
          OUTPUT_FILE: ${{ inputs.output-file }}
          HEADER: ${{ inputs.header }}
        run: |
          printf '\n' >> "$OUTPUT_FILE"
          printf '%s\n' "### $HEADER" "<sup><sub>Generated at commit ${{ github.sha }}</sub></sup>" >> "$OUTPUT_FILE"
          cat cloc.md >> "$OUTPUT_FILE"
          rm cloc.md
      - name: Commit ${{ inputs.output-file }}
        uses: stefanzweifel/git-auto-commit-action@v4
        if: ${{ steps.continue.outputs.continue == 'true' && inputs.commit == 'true' }}
        with:
          commit_message: "chore: Generate ${{ inputs.output-file }}"
          # Note: README.tmpl.md is needed in the first case
          file_pattern: ${{ inputs.output-file }} ${{ inputs.template-file }}
